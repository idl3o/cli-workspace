"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.compileSnippets = void 0;
const path = __importStar(require("path"));
const PackageInfo_1 = require("./src/PackageInfo");
const SnippetCompiler_1 = require("./src/SnippetCompiler");
const DEFAULT_FILES = ["README.md"];
const parseArguments = (args) => {
    var _a;
    if (typeof args === "string") {
        return {
            markdownFiles: [args],
        };
    }
    if (Array.isArray(args)) {
        return {
            markdownFiles: args,
        };
    }
    return {
        project: args.project,
        markdownFiles: (_a = args.markdownFiles) !== null && _a !== void 0 ? _a : DEFAULT_FILES,
    };
};
async function compileSnippets(args = DEFAULT_FILES) {
    const { project, markdownFiles } = parseArguments(args);
    const packageDefinition = await PackageInfo_1.PackageInfo.read();
    const compiledDocsFolder = path.join(packageDefinition.packageRoot, ".tmp-compiled-docs");
    const compiler = new SnippetCompiler_1.SnippetCompiler(compiledDocsFolder, packageDefinition, project);
    const results = await compiler.compileSnippets(markdownFiles);
    return results;
}
exports.compileSnippets = compileSnippets;
//# sourceMappingURL=index.js.map