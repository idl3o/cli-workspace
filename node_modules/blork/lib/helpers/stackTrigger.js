const destack = require("./destack");

/**
 * Get the cause from a destacked error stack.
 *
 * Return details about where the error was CAUSED (i.e. NOT where it was thrown), by parsing the `Error.stack` property.
 * It's not relevant to the the dev that the error was thrown in blorker.js on line X — they need to know where they caused the error.
 * It's actually also not relevant to return the function where the user CALLED e.g. `check()`, it's the one before that.
 *
 * We also prepend the function/method this to error messages, so rather than error message being "Must be string" it is "MyClass.myFunc(): Must be string"
 *
 * @param {string} stack A stack string as generated by `new Error()` — unfortunately different browsers use different formats.
 * @param {string[]} ignore Functions to ignore at the top of the stack. The first frame of the stack with a named function not in this list is the 'trigger'. Functions need to be formatted with a pair of parens like `myFunc()`
 * @returns {Array} An array like `[functionName, file, line]` that represents the file/line/call that caused this error, or undefined if it can't be found.
 *
 * @internal
 */
function stackTrigger(stack, ignore) {
	// Parse the stack into its constituent rows.
	const frames = destack(stack);
	if (frames.length) {
		// Break the stack into lines.
		const lines = stack.split("\n");

		// Whether to return the next frame in the loop with a named function.
		let returnNextNamed = false;

		// Loop through the frames.
		for (let i = 0; i < frames.length; i++) {
			// Is the function named needle?
			if (ignore.indexOf(frames[i].function) >= 0) {
				// Return the next named function.
				returnNextNamed = true;
			} else if (returnNextNamed && frames[i].function) {
				// Return this frame (if the previous frame had a function named blorker$etc and this frame has a named function).
				// Recreate the stack property ignoring all lines above this.
				frames[i].stack = lines.join("\n");
				// Return this frame.
				return frames[i];
			}

			// Remove this line from the stack.
			const j = lines.indexOf(frames[i].original);
			/* istanbul ignore else */
			if (j >= 0) lines.splice(j, 1);
		}

		// Otherwise return the first frame.
		frames[0].stack = stack;
		return frames[0];
	}
}

// Exports.
module.exports = stackTrigger;
