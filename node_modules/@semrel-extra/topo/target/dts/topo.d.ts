import { TTopoResult } from 'toposource';
import { ITopoOptionsNormalized, IDepEntry, IDepEntryEnriched, IPackageEntry, IPackageJson, IPackageDeps, ITopoOptions, ITopoContext } from './interface';
export * from './interface';
export declare const getPackages: (options: ITopoOptionsNormalized) => Promise<Record<string, IPackageEntry>>;
export declare const getPackage: (cwd: string, manifestPath: string) => Promise<IPackageEntry>;
export declare const topo: (options?: ITopoOptions) => Promise<ITopoContext>;
export declare const extractWorkspaces: (root: IPackageEntry) => Promise<string[]>;
export declare const getGraph: (manifests: IPackageJson[], depFilter: ITopoOptionsNormalized['depFilter'], scopes?: string[]) => {
    nodes: string[];
    edges: [string, string][];
};
export declare const getManifestsPaths: ({ workspaces, cwd }: ITopoOptionsNormalized) => Promise<string[]>;
export declare const slash: (path: string) => string;
export declare const traverseQueue: ({ queue, prev, cb }: {
    queue: TTopoResult['queue'];
    prev: TTopoResult['prev'];
    cb: (name: string) => any;
}) => Promise<void[]>;
export declare const traverseDeps: ({ packages, pkg: parent, scopes, cb }: {
    pkg: IPackageEntry;
    packages: Record<string, IPackageEntry>;
    scopes?: string[] | undefined;
    cb(depEntry: IDepEntryEnriched): any;
}) => Promise<void>;
export declare const iterateDeps: (manifest: IPackageJson, cb: (ctx: IDepEntry & {
    deps: IPackageDeps;
}) => any, scopes?: string[]) => void;
